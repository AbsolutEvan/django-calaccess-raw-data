#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.utils.encoding import python_2_unicode_compatible
from django.db import models


@python_2_unicode_compatible
class RawDataVersion(models.Model):
    """
    Version of CAL-ACCESS raw source data, typically released every day.
    """
    release_datetime = models.DateTimeField(
        db_column='RELEASE_DATETIME',
        unique=True,
        null=False,
        verbose_name='date and time of release',
        help_text="Date and time the version of the CAL-ACCESS database was released"
    )

    class Meta:
        app_label = 'calaccess_raw'
        verbose_name = 'raw data version'
        verbose_name_plural = 'raw data versions'
        ordering = ['-release_datetime']

    def __str__(self):
        return str(self.release_datetime)

@python_2_unicode_compatible
class RawDataTaskLog(models.Model):
    version = models.ForeignKey(
        'RawDataVersion',
        on_delete=models.CASCADE,
        null=False,
        db_column='VERSION_ID',
        verbose_name='raw data version',
        help_text='Foreign key referencing the version of the raw source data on which the processing task was performed' 
    )
    task_name = models.CharField(
        max_length=50,
        null=False,
        db_column='TASK_NAME',
        verbose_name='task name',
        help_text='Name of the task performed on the given version of the raw source data'
    )
    start_datetime = models.DateTimeField(
        db_column='START_DATETIME',
        null=False,
        verbose_name='date and time task started',
        help_text="Date and time when the given task started on the given version of the raw source data"
    )    
    finish_datetime = models.DateTimeField(
        db_column='FINISH_DATETIME',
        null=True,
        verbose_name='date and time task_name finished',
        help_text="Date and time when the given task finished on the given version of the raw source data"
    )

    class Meta:
        app_label = 'calaccess_raw'
        verbose_name = 'raw data task log'
        verbose_name_plural = 'raw data task log'
        ordering = ['-id']

    def __str__(self):
        return str(self.task_name)

@python_2_unicode_compatible
class RawDataFile(models.Model):
    version = models.ForeignKey(
        'RawDataVersion',
        on_delete=models.CASCADE,
        null=False,
        db_column='VERSION_ID',
        verbose_name='raw data version',
        help_text='Foreign key referencing the version of the raw source data in which the file was included' 
    )
    UNIQUE_KEY = (
        "VERSION_ID",
        "FILE_NAME",
    )
    file_name = models.CharField(
        max_length=100,
        null=False,
        db_column='FILE_NAME',
        verbose_name='file name',
        help_text='Name of the raw source file without extension',
    )
    download_records_count = models.IntegerField(
        null=False,
        default=0,
        db_column='DOWNLOAD_RECORDS_COUNT',
        verbose_name='download records count',
        help_text='Count of records in the original file downloaded from CAL-ACCESS'
    )
    clean_records_count = models.IntegerField(
        null=False,
        default=0,
        db_column='CLEAN_RECORDS_COUNT',
        verbose_name='clean records count',
        help_text='Count of records in the cleaned file generated by calaccess_raw'
    )
    load_records_count = models.IntegerField(
        null=False,
        default=0,
        db_column='LOAD_RECORDS_COUNT',
        verbose_name='load records count',
        help_text='Count of records in the loaded from cleaned file into calaccess_raw\'s data model'
    )
    download_columns_count = models.IntegerField(
        null=False,
        default=0,
        db_column='DOWNLOAD_COLUMNS_COUNT',
        verbose_name='download columns count',
        help_text='Count of columns in the original file downloaded from CAL-ACCESS'
    )
    clean_columns_count = models.IntegerField(
        null=False,
        default=0,
        db_column='CLEAN_COLUMNS_COUNT',
        verbose_name='clean columns count',
        help_text='Count of columns in the cleaned file generated by calaccess_raw'
    )
    load_columns_count = models.IntegerField(
        null=False,
        default=0,
        db_column='LOAD_COLUMNS_COUNT',
        verbose_name='load columns count',
        help_text='Count of columns on the loaded calaccess_raw data model'
    )

    class Meta:
        app_label = 'calaccess_raw'
        verbose_name = 'raw data file'
        verbose_name_plural = 'raw data files'
        ordering = ['-version_id', 'file_name']

    def __str__(self):
        return str(self.file_name)
